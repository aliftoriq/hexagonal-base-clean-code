// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/hibbannn/hexagonal-boilerplate/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// MessengerService is an autogenerated mock type for the MessengerService type
type MessengerService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: userID, message
func (_m *MessengerService) CreateMessage(userID string, message domain.Message) error {
	ret := _m.Called(userID, message)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Message) error); ok {
		r0 = rf(userID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessage provides a mock function with given fields: id
func (_m *MessengerService) DeleteMessage(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessage provides a mock function with given fields: id
func (_m *MessengerService) ReadMessage(id string) (*domain.Message, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 *domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Message, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessages provides a mock function with given fields:
func (_m *MessengerService) ReadMessages() ([]*domain.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadMessages")
	}

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: id, message
func (_m *MessengerService) UpdateMessage(id string, message domain.Message) error {
	ret := _m.Called(id, message)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Message) error); ok {
		r0 = rf(id, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessengerService creates a new instance of MessengerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessengerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessengerService {
	mock := &MessengerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
